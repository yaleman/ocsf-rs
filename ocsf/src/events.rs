/// The base event is a generic and concrete event. It also defines a set of attributes available in most event classes. As a generic event that does not belong to any event category, it could be used to log events that are not otherwise defined by the schema.
///
/// Sourced from: `events/base_event.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct BaseEvent {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    pub cloud: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enrichments: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    pub metadata: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub observables: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub raw_data: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    pub severity_id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status_code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status_detail: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unmapped: Option<String>,
}

impl BaseEvent {
    /// Set the value of api
    pub fn with_api(self, api: String) -> Self {
        Self { api: Some(api),
        ..self  
        }
    }

    /// Set the value of enrichments
    pub fn with_enrichments(self, enrichments: String) -> Self {
        Self { enrichments: Some(enrichments),
        ..self  
        }
    }

    /// Set the value of message
    pub fn with_message(self, message: String) -> Self {
        Self { message: Some(message),
        ..self  
        }
    }

    /// Set the value of observables
    pub fn with_observables(self, observables: String) -> Self {
        Self { observables: Some(observables),
        ..self  
        }
    }

    /// Set the value of raw_data
    pub fn with_raw_data(self, raw_data: String) -> Self {
        Self { raw_data: Some(raw_data),
        ..self  
        }
    }

    /// Set the value of severity
    pub fn with_severity(self, severity: String) -> Self {
        Self { severity: Some(severity),
        ..self  
        }
    }

    /// Set the value of status
    pub fn with_status(self, status: String) -> Self {
        Self { status: Some(status),
        ..self  
        }
    }

    /// Set the value of status_code
    pub fn with_status_code(self, status_code: String) -> Self {
        Self { status_code: Some(status_code),
        ..self  
        }
    }

    /// Set the value of status_detail
    pub fn with_status_detail(self, status_detail: String) -> Self {
        Self { status_detail: Some(status_detail),
        ..self  
        }
    }

    /// Set the value of status_id
    pub fn with_status_id(self, status_id: String) -> Self {
        Self { status_id: Some(status_id),
        ..self  
        }
    }

    /// Set the value of unmapped
    pub fn with_unmapped(self, unmapped: String) -> Self {
        Self { unmapped: Some(unmapped),
        ..self  
        }
    }

    /// No description available.
    pub fn new(cloud: String, metadata: String, severity_id: String) -> Self {
        Self {
        api: None,
        cloud,
        enrichments: None,
        message: None,
        metadata,
        observables: None,
        raw_data: None,
        severity: None,
        severity_id,
        status: None,
        status_code: None,
        status_detail: None,
        status_id: None,
        unmapped: None,
        }
    }
}

pub mod application;

pub mod discovery;

pub mod findings;

pub mod iam;

pub mod network;

pub mod system;

// This file was automatically generated by ocsf-codegen at 2023-06-06T22:56:49+00:00 branch: "yaleman/issue9" link: <https://github.com/yaleman/ocsf-rs/commit/7c25539db4b4823979b3d4ee870fad2ab8f805cf>