/// The Audit Activity event is a generic event that defines a set of attributes available in the audit events. As a generic event, it could be used to log events that are not otherwise defined by the Audit Activity category.
///
/// Sourced from: `events/audit/audit.json`
#[derive(Deserialize, Serialize)]
pub struct Audit;

/// Access activity events describe successful/failed attempts to access an application.
///
/// Sourced from: `events/audit/access_activity.json`
#[derive(Deserialize, Serialize)]
pub struct AccessActivity {
    /// Details about the source endpoint of the connection.
    src_endpoint: Option<String>,
    http_response: String,
    actor: Option<String>,
    tls: Option<String>,
    http_request: String,
    /// Details about the proxy if available.
    proxy: Option<String>,
    activity_id: Option<String>,
}

/// Entity Management events report activity by a managed client, a micro service, or a user at a management console. The activity can be a create, read, update, and delete operation on a managed entity.
///
/// Sourced from: `events/audit/entity.json`
#[derive(Deserialize, Serialize)]
pub struct EntityManagement {
    activity_id: Option<String>,
    /// Use for when the entity acting upon another entity is a process or user.
    actor: Option<String>,
    entity: String,
    entity_result: Option<String>,
    /// The user provided comment about why the entity was changed.
    comment: Option<String>,
}

/// API events describe general CRUD (Create, Read, Update, Delete) API activities, e.g. (AWS Cloudtrail)
///
/// Sourced from: `events/audit/api.json`
#[derive(Deserialize, Serialize)]
pub struct ApiActivity {
    /// Details about the source of the activity.
    src_endpoint: String,
    activity_id: Option<String>,
    dst_endpoint: Option<String>,
    actor: String,
    /// Details about the underlying http request.
    http_request: Option<String>,
    api: String,
    /// Details about resources that were affected by the activity/event.
    resources: Option<String>,
}

/// Authorization events report special privileges or groups assigned to a session.
///
/// Sourced from: `events/audit/authorization.json`
#[derive(Deserialize, Serialize)]
pub struct Authorization {
    /// The list of sensitive privileges, assigned to the new user session.
    privileges: String,
    /// The Endpoint for which the authentication was targeted.
    dst_endpoint: String,
    activity_id: Option<String>,
    /// The modified user session.
    session: Option<String>,
    /// The user to which new privileges were assigned.
    user: String,
}

/// Authentication events report authentication session activities such as user attempts a logon or logoff, successfully or otherwise.
///
/// Sourced from: `events/audit/authentication.json`
#[derive(Deserialize, Serialize)]
pub struct Authentication {
    /// The Endpoint from which the authentication was requested.
    src_endpoint: Option<String>,
    is_remote: Option<String>,
    /// Details about the underlying http request.
    http_request: Option<String>,
    logon_type: Option<String>,
    /// The details about the authentication request. For example, possible details for Windows logon or logoff events are:<ul><li>Success</li><ul><li>LOGOFF_USER_INITIATED</li><li>LOGOFF_OTHER</li></ul><li>Failure</li><ul><li>USER_DOES_NOT_EXIST</li><li>INVALID_CREDENTIALS</li><li>ACCOUNT_DISABLED</li><li>ACCOUNT_LOCKED_OUT</li><li>PASSWORD_EXPIRED</li></ul></ul>
    status_detail: Option<String>,
    /// The actor that requested the authentication.
    actor: Option<String>,
    logon_type_id: Option<String>,
    mfa: Option<String>,
    /// The target identity (user/role) to authenticate.
    user: String,
    logon_process: Option<String>,
    auth_protocol: Option<String>,
    /// The new session of the authenticated user.
    session: Option<String>,
    activity_id: Option<String>,
    /// The Endpoint for which the authentication was targeted.
    dst_endpoint: String,
    auth_protocol_id: Option<String>,
    is_cleartext: Option<String>,
}

/// Account Change events report when specific user account management tasks are performed, such as a user/role being created, changed, deleted, renamed, disabled, enabled, locked out or unlocked.
///
/// Sourced from: `events/audit/account.json`
#[derive(Deserialize, Serialize)]
pub struct AccountChange {
    activity_id: Option<String>,
    actor: String,
    /// Details about the source of the activity.
    src_endpoint: Option<String>,
    /// The user that was a target of an activity.
    user: Option<String>,
    user_result: Option<String>,
    /// Details about the underlying http request.
    http_request: Option<String>,
}

use serde::{Deserialize, Serialize};

// This file was automatically generated by ocsf-codegen at 2023-03-27T21:46:59+00:00 branch: "yaleman/issue8" link: <https://github.com/yaleman/ocsf-rs/commit/4e69c4f97b90710c53906ab4e63de0c80aa8f60a>
