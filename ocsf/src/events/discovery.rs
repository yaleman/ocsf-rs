/// Device Config State events report device configuration data.
///
/// Sourced from: `events/discovery/config_state.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct ConfigState {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cis_benchmark_result: Option<String>,
    pub device: String,
}

impl ConfigState {
    pub const UID: u16 = 2;
    /// Set the value of actor
    pub fn with_actor(self, actor: String) -> Self {
        Self { actor: Some(actor),
        ..self  
        }
    }

    /// Set the value of cis_benchmark_result
    pub fn with_cis_benchmark_result(self, cis_benchmark_result: String) -> Self {
        Self { cis_benchmark_result: Some(cis_benchmark_result),
        ..self  
        }
    }

    /// The device that is being discovered by an inventory process. - required
    pub fn new(device: String) -> Self {
        Self {
        actor: None,
        cis_benchmark_result: None,
        device,
        }
    }
}

/// The Discovery event is a generic event that defines a set of attributes available in Discovery category events. As a generic event, it could be used to log events that are not otherwise defined by the Discovery specific event classes.
///
/// Sourced from: `events/discovery/discovery.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct Discovery {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
}

impl Discovery {
    pub const UID: u16 = 5000;
    /// Set the value of activity_id
    pub fn with_activity_id(self, activity_id: String) -> Self {
        Self { activity_id: Some(activity_id),
        }
    }

    /// No description available.
    pub fn new() -> Self {
        Self {
        activity_id: None,
        }
    }
}

/// Device Inventory Info events report device inventory data.
///
/// Sourced from: `events/discovery/inventory_info.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct InventoryInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<String>,
    pub device: String,
}

impl InventoryInfo {
    pub const UID: u16 = 1;
    /// Set the value of actor
    pub fn with_actor(self, actor: String) -> Self {
        Self { actor: Some(actor),
        ..self  
        }
    }

    /// The device that is being discovered by an inventory process. - required
    pub fn new(device: String) -> Self {
        Self {
        actor: None,
        device,
        }
    }
}

// This file was automatically generated by ocsf-codegen at 2023-06-06T22:56:49+00:00 branch: "yaleman/issue9" link: <https://github.com/yaleman/ocsf-rs/commit/7c25539db4b4823979b3d4ee870fad2ab8f805cf>