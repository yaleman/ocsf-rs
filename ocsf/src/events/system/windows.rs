/// Registry Key Activity events report when a process performs an action on a Windows registry key.
///
/// Sourced from: `events/system/windows/registry_key.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct RegistryKeyActivity {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub access_mask: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<crate::RegistryKeyActivity>,
    pub actor: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub create_mask: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub open_mask: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_reg_key: Option<String>,
    pub reg_key: String,
}

impl RegistryKeyActivity {
    pub const UID: u16 = 8;
    /// Set the value of access_mask
    pub fn with_access_mask(self, access_mask: String) -> Self {
        Self {
            access_mask: Some(access_mask),
            ..self
        }
    }

    /// Set the value of activity_id
    pub fn with_activity_id(self, activity_id: crate::RegistryKeyActivity) -> Self {
        Self {
            activity_id: Some(activity_id),
            ..self
        }
    }

    /// Set the value of create_mask
    pub fn with_create_mask(self, create_mask: String) -> Self {
        Self {
            create_mask: Some(create_mask),
            ..self
        }
    }

    /// Set the value of open_mask
    pub fn with_open_mask(self, open_mask: String) -> Self {
        Self {
            open_mask: Some(open_mask),
            ..self
        }
    }

    /// Set the value of prev_reg_key
    pub fn with_prev_reg_key(self, prev_reg_key: String) -> Self {
        Self {
            prev_reg_key: Some(prev_reg_key),
            ..self
        }
    }

    pub fn new(actor: String, reg_key: String) -> Self {
        Self {
            access_mask: None,
            activity_id: None,
            actor,
            create_mask: None,
            open_mask: None,
            prev_reg_key: None,
            reg_key,
        }
    }
}

/// Registry Value Activity events reports when a process performs an action on a Windows registry value.
///
/// Sourced from: `events/system/windows/registry_value.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct RegistryValueActivity {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<crate::RegistryValueActivity>,
    pub actor: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_reg_value: Option<String>,
    pub reg_value: String,
}

impl RegistryValueActivity {
    pub const UID: u16 = 9;
    /// Set the value of activity_id
    pub fn with_activity_id(self, activity_id: crate::RegistryValueActivity) -> Self {
        Self {
            activity_id: Some(activity_id),
            ..self
        }
    }

    /// Set the value of prev_reg_value
    pub fn with_prev_reg_value(self, prev_reg_value: String) -> Self {
        Self {
            prev_reg_value: Some(prev_reg_value),
            ..self
        }
    }

    pub fn new(actor: String, reg_value: String) -> Self {
        Self {
            activity_id: None,
            actor,
            prev_reg_value: None,
            reg_value,
        }
    }
}

/// Windows Resource Activity events report when a process accesses a Windows managed resource object, successful or otherwise.
///
/// Sourced from: `events/system/windows/resource.json`
#[derive(serde::Deserialize, serde::Serialize, Default, Debug)]
pub struct ResourceActivity {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
    pub win_resource: String,
}

impl ResourceActivity {
    pub const UID: u16 = 10;
    /// Set the value of activity_id
    pub fn with_activity_id(self, activity_id: String) -> Self {
        Self {
            activity_id: Some(activity_id),
            ..self
        }
    }

    pub fn new(win_resource: String) -> Self {
        Self {
            activity_id: None,
            win_resource,
        }
    }
}

// This file was automatically generated by ocsf-codegen at 2023-03-29T23:19:53+00:00 branch: "yaleman/issue9" link: <https://github.com/yaleman/ocsf-rs/commit/23c75ddd98fcb28b7dc81dd488385e97fab90381>
