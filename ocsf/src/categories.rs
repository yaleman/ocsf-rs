//! OCSF Category data

//!

//! The OCSF categories organize event classes, each aligned with a specific domain or area of focus.

// This file was automatically generated by ocsf-codegen at 2024-02-26T03:11:11+00:00 branch: "main" link: <https://github.com/yaleman/ocsf-rs/commit/cee9b6fcdc93b8937747d894e9586cbc355c3490> OCSF Schema version: 1.1.0

/// The OCSF categories organize event classes, each aligned with a specific domain or area of focus.
pub enum Category {
    /// Application Activity events report detailed information about the behavior of applications and services.
    ///
    /// `uid=6`
    Application,
    /// Discovery events report the existence and state of devices, files, configurations, processes, registry keys, and other objects.
    ///
    /// `uid=5`
    Discovery,
    /// Findings events report findings, detections, and possible resolutions of malware, anomalies, or other actions performed by security products.
    ///
    /// `uid=2`
    Findings,
    /// Identity & Access Management (IAM) events relate to the supervision of the system's authentication and access control model. Examples of such events are the success or failure of authentication, granting of authority, password change, entity change, privileged use etc.
    ///
    /// `uid=3`
    Iam,
    /// Network Activity events.
    ///
    /// `uid=4`
    Network,
    /// System Activity events.
    ///
    /// `uid=1`
    System,
}

impl From<Category> for u8 {
    fn from(input: Category) -> u8 {
        match input {
            Category::Application => 6,
            Category::Discovery => 5,
            Category::Findings => 2,
            Category::Iam => 3,
            Category::Network => 4,
            Category::System => 1,
        }
    }
}

impl TryFrom<u8> for Category {
    type Error = String;

    fn try_from(input: u8) -> Result<Self, String> {
        let res = match input {
            6 => Category::Application,
            5 => Category::Discovery,
            2 => Category::Findings,
            3 => Category::Iam,
            4 => Category::Network,
            1 => Category::System,
            _ => return Err(format!("Invalid value specified: {input}")),
        };
        Ok(res)
    }
}
